//SPDX-License-Identifier: MIT

pragma solidity 0.8.15;

contract ArraySort {
    function sorting(uint[] memory array, uint number) public returns(uint[] memory) {
        uint length = array.length;
        uint leftItem = array[0];
        uint rightItem = array[length - 1];
        uint n = number;
        //number = msg.sender;
        array = quickSort(array, leftItem, rightItem);
        uint[] storage newArray;
        for(uint i = array.length - 1; i >= number; i--) {
            newArray.push(array[i]);
        }
        return newArray;
    }
    uint pivot;
   
    function quickSort(uint[] memory _array, uint leftItem, uint rightItem) internal returns(uint[] memory) {
        uint partitionIndex;
        if(leftItem < rightItem) {
            partitionIndex = partition(_array, leftItem, rightItem);
            quickSort(_array, leftItem, partitionIndex - 1);
            quickSort(_array, partitionIndex + 1, rightItem);
        }
        return _array;
    }
    function partition(uint[] memory _array, uint leftItem, uint rightItem) internal returns(uint) {
        pivot = _array[rightItem];
        uint index = (leftItem - 1);
        for(uint i = leftItem; i < rightItem; i++) {
            if(_array[i] < pivot) {
               index++;
               uint temp = _array[index];
               _array[index] = _array[i];
               _array[i] = temp;
            }
        }
        uint temp2 = _array[index + 1];
        _array[index + 1] = _array[rightItem];
        _array[rightItem] = temp2;
        return (index + 1);
    }
}
