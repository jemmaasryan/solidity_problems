//SPDX-License-Identifier: MIT

pragma solidity 0.8.15;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract Problem6ERCToken is IERC20, Ownable {
    mapping(address => uint256) private balances;
    mapping(address => mapping(address => uint256)) private allowances;

    uint256 private _totalSupply;
    string private _name;
    string private _symbol;

    constructor() public {
        _name = "Yerevan";
        _symbol = "YVN";
        _totalSupply = 10000000;
        balances[0x27CB64F2AEFE09DAd5175d2c251065fD5db2f6f1] = _totalSupply;
        emit Transfer(address(0), 0x27CB64F2AEFE09DAd5175d2c251065fD5db2f6f1, _totalSupply);
    }
    function name() public view virtual returns(string memory) {
        return _name;
    }
    function symbol() public view virtual returns(string memory) {
        return _symbol;
    }
    function decimals() public view virtual returns(uint8) {
        return 14;
    }
    function totalSupply() public view virtual returns(uint256){
        return _totalSupply;
    }

    function balanceOf(address account) public view virtual override returns(uint256) {
        return balances[account];
    }
    /* Requirements:
     * `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
    */
    function _transfer(address from, address to, uint256 amount) internal virtual {
        require(from != address(0), "Can't transfer from 0 address");
        require(to != address(0), "Can't transfer to 0 address");
        _beforeTokenTrasnfer(from, to, amount);

        uint256 balanceFrom = balances[from];
        require(balanceFrom >= amount, "Can't exceed the amount");
        unchecked {
            balances[from] = balanceFrom - amount;
            balances[to] += amount;
        }
    }
    /**Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
    */
    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "Can't approve from 0 address");
        require(spender != address(0), "Can't approve to 0 address");
        allowances[owner][spender] = amount;

        emit Approval(owner, spender, amount);
    }
    /**
     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function spendAllowance(address owner, address spender, uint256 amount) internal virtual {
        uint256 current = allowances[owner][spender];
        if(current != type(uint256).max){
            require(current >= amount, "Insufficient allowence.");
            unchecked { _approve(owner, spender, current - amount); }
        }
    }
    function _beforeTokenTrasnfer(address from, address to, uint256 amount) internal virtual { }
    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual { }

    function transfer(address to, uint256 amount) public virtual override returns(bool) {
        _transfer(msg.sender, to, amount);
        return true;
    }
    function allowance(address owner, address spender) external view returns(uint256) {
        return allowances[owner][spender];
    }
    function approve(address spender, uint256 amount) public virtual override returns(bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }
    function transferFrom(address from, address to, uint256 amount) public virtual override returns(bool) {
        spendAllowance(from, msg.sender, amount);
        _transfer(from, to, amount);
        return true;
    }
    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
    */
    function _burn(address account, uint256 amount) internal virtual { 
        require(account != address(0), "Address can't be 0.");
        uint accountBalance = balances[account];
        require(accountBalance >= amount, "Amount exceeds the balance.");
        unchecked {
            balances[account] = accountBalance - amount;
            _totalSupply -= amount;
        }
    }
    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
    */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "Can't mint to address 0");
        _beforeTokenTrasnfer(address(0), account, amount);
        _totalSupply += amount;
        unchecked { balances[account] += amount; }

        emit Transfer(address(0), account, amount);
        _afterTokenTransfer(address(0), account, amount);
    }
}
